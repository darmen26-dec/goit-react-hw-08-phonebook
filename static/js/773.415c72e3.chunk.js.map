{"version":3,"file":"static/js/773.415c72e3.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts;\nexport const getFilter = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"title\":\"ContactForm_title__jZguf\",\"input\":\"ContactForm_input__Bl93P\",\"separator\":\"ContactForm_separator__wLuuv\"};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addAsyncContact } from '../../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport css from '../../components/ContactForm/ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [formData, setFormData] = useState({ name: '', phone: '' });\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const { name, phone } = formData;\n\n    const isNameExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isNameExists) {\n      Notiflix.Notify.warning(`${name} already exists in contacts.`);\n      return;\n    }\n\n    const id = nanoid();\n    dispatch(addAsyncContact({ id, name, phone }));\n    setFormData({ name: '', phone: '' });\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormData(prevData => ({ ...prevData, [name]: value }));\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.title} htmlFor=\"name\">\n        Name\n        <input\n          className={css.input}\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          autoComplete=\"off\"\n          pattern=\"[A-Za-zÀ-ÖØ-öø-ÿ]+[\\s]?[A-Za-zÀ-ÖØ-öø-ÿ]+\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={formData.name}\n          onChange={handleChange}\n          placeholder=\"Adrian Smith\"\n        />\n      </label>\n      <label className={css.title} htmlFor=\"number\">\n        Number\n        <input\n          className={css.input}\n          id=\"number\"\n          type=\"tel\"\n          name=\"phone\"\n          autoComplete=\"off\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={formData.phone}\n          onChange={handleChange}\n          placeholder=\"+48 123-456-789\"\n        />\n      </label>\n      <div className={css.separator}>\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"filterName\"\n        className={css.filter}\n        value={filter.status}\n        onChange={onFilterChange}\n        placeholder=\"Enter name\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactList_contacts__jDmyV\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"contactsName\":\"ContactList_contactsName__6rTA7\",\"contactsNumber\":\"ContactList_contactsNumber__nraQu\",\"contactsBtn\":\"ContactList_contactsBtn__yx6OU\"};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchContacts,\n  deleteAsyncContact,\n} from '../../redux/contacts/operations';\nimport { getContacts, getFilter } from '../../redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filterStatus = useSelector(getFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterStatus.status.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const deleteContactById = contactId => {\n    try {\n      dispatch(deleteAsyncContact(contactId));\n    } catch (error) {\n      console.error('Error deleting contact:', error.message);\n    }\n  };\n\n  return (\n    <div className={css.contacts}>\n      <ul className={css.contactsList}>\n        {filteredContacts.map(contact => (\n          <li className={css.contactsItem} key={contact.id}>\n            <p className={css.contactsName}>{contact.name}</p>\n            <p className={css.contactsNumber}>{contact.phone}</p>\n            <button\n              className={css.contactsBtn}\n              onClick={() => deleteContactById(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <p>Find contact by name</p>\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","getFilter","filter","dispatch","useDispatch","useSelector","_useState","useState","name","phone","_useState2","_slicedToArray","formData","setFormData","useEffect","localStorage","setItem","JSON","stringify","handleChange","event","_event$target","target","value","prevData","_objectSpread","_defineProperty","_jsxs","className","css","onSubmit","preventDefault","some","contact","toLowerCase","Notiflix","concat","id","nanoid","addAsyncContact","children","htmlFor","_jsx","type","autoComplete","pattern","title","required","onChange","placeholder","status","setFilter","filterStatus","filteredContacts","includes","fetchContacts","map","onClick","contactId","deleteAsyncContact","error","console","message","deleteContactById","_Fragment","ContactForm","Filter","ContactList"],"sourceRoot":""}