{"version":3,"file":"static/js/773.22ad4e6c.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts;\nexport const getFilter = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"title\":\"ContactForm_title__jZguf\",\"input\":\"ContactForm_input__Bl93P\",\"separator\":\"ContactForm_separator__wLuuv\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addAsyncContact } from '../../redux/contacts/operations';\nimport Notiflix from 'notiflix';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport css from '../../components/ContactForm/ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = formData;\n\n    const isNameExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isNameExists) {\n      Notiflix.Notify.warning(`${name} already exists in contacts.`);\n      return;\n    }\n\n    dispatch(addAsyncContact({ name, number }));\n    setFormData({ name: '', number: '' });\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormData(prevData => ({ ...prevData, [name]: value }));\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.title} htmlFor=\"name\">\n        Name\n        <input\n          className={css.input}\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          autoComplete=\"off\"\n          pattern=\"[A-Za-zÀ-ÖØ-öø-ÿ]+[\\s]?[A-Za-zÀ-ÖØ-öø-ÿ]+\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={formData.name}\n          onChange={handleChange}\n          placeholder=\"Adrian Smith\"\n        />\n      </label>\n      <label className={css.title} htmlFor=\"number\">\n        Number\n        <input\n          className={css.input}\n          id=\"number\"\n          type=\"tel\"\n          name=\"number\"\n          autoComplete=\"off\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={formData.number}\n          onChange={handleChange}\n          placeholder=\"+48 123-456-789\"\n        />\n      </label>\n      <div className={css.separator}>\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"filterName\"\n        className={css.filter}\n        value={filter.status}\n        onChange={onFilterChange}\n        placeholder=\"Enter name\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactList_contacts__jDmyV\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"contactsName\":\"ContactList_contactsName__6rTA7\",\"contactsNumber\":\"ContactList_contactsNumber__nraQu\",\"contactsBtn\":\"ContactList_contactsBtn__yx6OU\"};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchContacts,\n  deleteAsyncContact,\n} from '../../redux/contacts/operations';\nimport { getContacts, getFilter } from '../../redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filterStatus = useSelector(getFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterStatus.status.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const deleteContactById = contactId => {\n    try {\n      dispatch(deleteAsyncContact(contactId));\n    } catch (error) {\n      console.error('Error deleting contact:', error.message);\n    }\n  };\n\n  return (\n    <div className={css.contacts}>\n      <ul className={css.contactsList}>\n        {filteredContacts.map(contact => (\n          <li className={css.contactsItem} key={contact.id}>\n            <p className={css.contactsName}>{contact.name}</p>\n            <p className={css.contactsNumber}>{contact.number}</p>\n            <button\n              className={css.contactsBtn}\n              onClick={() => deleteContactById(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <p>Find contact by name</p>\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","getFilter","filter","dispatch","useDispatch","useSelector","_useState","useState","name","number","_useState2","_slicedToArray","formData","setFormData","handleChange","event","_event$target","target","value","prevData","_objectSpread","_defineProperty","_jsxs","className","css","onSubmit","preventDefault","some","contact","toLowerCase","Notiflix","concat","addAsyncContact","children","htmlFor","_jsx","id","type","autoComplete","pattern","title","required","onChange","placeholder","status","setFilter","filterStatus","filteredContacts","includes","useEffect","fetchContacts","map","onClick","contactId","deleteAsyncContact","error","console","message","deleteContactById","_Fragment","ContactForm","Filter","ContactList"],"sourceRoot":""}